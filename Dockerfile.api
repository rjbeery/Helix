# syntax=docker/dockerfile:1

# --- deps: prefetch the lock for faster, reproducible installs
FROM node:20-alpine AS deps
WORKDIR /app
RUN corepack enable
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json ./
# add per-package manifests so pnpm knows the graph (adjust if your layout differs)
COPY apps/api/package.json apps/api/package.json
COPY packages/*/package.json packages/*/
RUN pnpm install --frozen-lockfile --filter helix-api...

# --- build
FROM node:20-alpine AS build
WORKDIR /app
RUN corepack enable
ENV PRISMA_SKIP_POSTINSTALL_GENERATE=1
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/api/node_modules ./apps/api/node_modules
COPY . .
# If Prisma is used, generate types (doesn't need DB at build)
RUN pnpm -C apps/api prisma generate || true
RUN pnpm -C apps/api build

# --- run (lean, prod)
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
# copy only what's needed to run the API
COPY --from=build /app/apps/api/dist apps/api/dist
COPY --from=build /app/apps/api/package.json apps/api/package.json
COPY --from=build /app/apps/api/prisma apps/api/prisma
COPY --from=build /app/node_modules node_modules
COPY --from=build /app/apps/api/node_modules apps/api/node_modules
USER node
EXPOSE 3001
CMD ["node", "apps/api/dist/server.js"]
